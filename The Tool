using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace SoloLearn
{
	class Program
	{
		static double[,] m = { {1, 1, 2}, {0, 1, 1} };
		static void Main(string[] args)
		{
			// double[,] m = { {1, 1, 2}, {0, 1, 1} };
			// PrintMatrix(m);
			// m = Interchange(m, 0, 1, 1, -1, 0);
			// PrintMatrix(m);
			Print();
		}

		static void Print() {
			PrintMatrix(m);
		}

		//  Takes 2D array, searches for a specific subarray by the given
		//  index, and returns a new array that serves as a replica of the subarray.
		//  Why? Because C# has no syntax for accessing a subarray.
		static double[] SubArray(double[,] matrix, int index)
		{
			double[] row = new double[matrix.GetLength(1)];
			for (int i = 0; i < row.Length; i++)
			{
				row[i] = matrix[index, i];
			}
			return row;
		}

		//  Reliable printing function for any sized 2D array.
		//  Also adds '|' before the last value to resemble an augmented matrix
		static void PrintMatrix(double[,] matrix)
		{
			Console.WriteLine();
			for (int i = 0; i < matrix.GetLength(0); i++)
			{
				for (int j = 0; j < matrix.GetLength(1); j++)
				{
					if (j + 2 == matrix.GetLength(1))
					{
						Console.Write(matrix[i, j] + "|");
					}
					else Console.Write(matrix[i, j] + " ");
				}
				Console.WriteLine();
			}
		}

		//  Returns new array with scaled array values.
		//  Simple function that helps with readability.
		static double[] ScaleRow(double[] row, double scalar)
		{
			for (int i = 0; i < row.GetLength(0); i++)
			{
				row[i] *= scalar;
			}
			return row;
		}

		//  Returns the sum of two arrays in a new array.
		//  Another simple function that helps with readability.
		static double[] AddRows(double[] row1, double[] row2)
		{
			double[] newRow = new double[row1.GetLength(0)];
			for (int i = 0; i < newRow.GetLength(0); i++)
			{
				newRow[i] = row1[i] + row2[i];
			}
			return newRow;
		}

		//  Copies the values of an array to a specific subarray in a 2D array.
		//  Returns the updated 2D array.
		//  Why? Again, because C# has no syntax for accessing subarrays.
		static double[,] CopyToMatrix(double[,] matrix, double[] row, int index)
		{
			for (int i = 0; i < row.GetLength(0); i++)
			{
				matrix[index, i] = row [i];
			}
			return matrix;
		}

		//  Your best friend when reducing matrices to Row-Echelon Form.
		//  Takes a 2D array, finds the specified subarrays, combines them into a new array,
		//  and copies the new array to the 2D array.
		//  Finally, returns the updated 2D array.
		//  Technically, ScaleRow and Interchange are similar, albeit one is
		//  more involved. But Scale Row is designed, alongside AddRows and CopyToMatrix,
		//  to be used in Interchange. Interchange is designed to be used directly
		//  in the main method.
		static double[,] Interchange(double[,] matrix, int row1, double scalar1, int row2, double scalar2, int targetRow)
		{
			double[] r1 = SubArray(matrix, row1);
			double[] r2 = SubArray(matrix, row2);

			double[] newRow = AddRows(ScaleRow(r1, scalar1), ScaleRow(r2, scalar2));
			return CopyToMatrix(matrix, newRow, targetRow);
		}
	}
}
